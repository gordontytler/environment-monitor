# see java.util.logging.FileHandler
# Use this system property
#
# -Djava.util.logging.config.file=./logging.properties
#
# e.g.
#
# /usr/java/jre1.6.0_17/bin/java -Djava.util.logging.config.file=./logging.properties -classpath ./bin monitor.api.Main
#
# example copied from http://www.javapractices.com/topic/TopicAction.do?Id=143
# I would not use this again. log4j is better unless you want resource bundles or want to log com.sun. or java.


# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
#handlers=java.util.logging.FileHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=INFO 


# Style of output (Simple or XML):
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

# --- ConsoleHandler ---
# Override of global logging level
#java.util.logging.ConsoleHandler.level=INFO
#java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=INFO

# Naming style for the output file:
# (%g is generation number)
java.util.logging.FileHandler.pattern=./log/environment-monitor-%g.log

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit=10000000

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=10

monitor.implementation.shell.InputFromShellReader.level=INFO
